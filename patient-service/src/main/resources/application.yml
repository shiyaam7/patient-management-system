spring:
  application:
    name: patient-service   # Name of the microservice

  kafka:
    # Kafka bootstrap servers: address of the Kafka broker to connect to
    # 'kafka' = Docker container name, '9092' = Kafka broker port inside Docker network
    bootstrap-servers: kafka:9092

    producer:
      # Serializer for the message key
      # Converts the key (String) into bytes that Kafka can send
      key-serializer: org.apache.kafka.common.serialization.StringSerializer

      # Serializer for the message value
      # Converts the message value (byte[] from Protobuf) into bytes Kafka can send
      value-serializer: org.apache.kafka.common.serialization.ByteArraySerializer


  # commented out,
  # Since we have defined everything as environment variable
  # in patient-service docker

# uncomment if you run this service outside the docker container
###################
#  h2:
#    console.path: /h2-console   # Enable H2 database web console at http://localhost:4000/h2-console
#
#  datasource:
#    url: jdbc:h2:mem:testdb     # Use an in-memory H2 database named "testdb"
#    driver-class-name: org.h2.Driver  # H2 JDBC driver to connect to database
#    username: admin_viewer      # Username to log into H2 database
#    password: password          # Password for the H2 database
#
#  jpa:
#    database-platform: org.hibernate.dialect.H2Dialect  # Hibernate SQL dialect for H2
#    hibernate:
#      ddl-auto: update          # Auto-update database schema when entity changes (creates/updates tables)
#
#  sql:
#    init:
#      mode: always              # Always run schema.sql/data.sql files on startup (if present)
#
#  show-sql: true
###################

server:
  port: 4000                    # Application will run on port 4000 (default is 8080)

logging:
  level:
    root=INFO:

